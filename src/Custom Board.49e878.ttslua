
--[[
     BoosterQueue
--]]
Collection = {}
function Collection:new (o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  self.first = 0
  self.last = -1
  self.count = 0
  return o
end

function Collection:push(value)
  self.last = self.last + 1;
  self[self.last] = value
  self.count = self.count + 1
end

function Collection:popNext()
  local first = self.first
  if first > self.last then return nil end
  local value = self[first]
  self[first] = nil
  self.first = first + 1
  self.count = self.count - 1

  return value
end

function Collection:hasItem()
  return self.first <= self.last
end

function Collection:getCount()
  return self.count
end

  --[[
       BoosterQueue
  --]]
boosterQueue = Collection:new()

--[[
     Worker
--]]
worker = {};
worker.isRunning = false;
worker.keepBasicLands = false;
worker.asBooster = false;

function worker.run()
  if not worker.isRunning then
    worker.isRunning = true;
    worker.determineOptions();
    worker.handleQueue();
  end
end

function worker.handleQueue()
  if boosterQueue:hasItem() then
    local nextTask = boosterQueue:popNext();
    worker.appendOptionsToTask(nextTask);
    boosterCreator.createByTask(nextTask, function() worker.handleQueue() end);
  else
    worker.isRunning = false;
    boosterCreator.bagCount = 0;
  end
end

function worker.appendOptionsToTask(task)
  task.keepBasicLands = worker.keepBasicLands;
  task.asBooster = worker.asBooster;
  return task;
end

function worker.determineOptions()
  worker.keepBasicLands = keepBasicLands();
  worker.asBooster = spawnAsBooster();
end

--[[
     BoosterCreator
--]]
boosterCreator = {
  cardQueue = Collection:new(),
  bagGuid = '', --guId of bag
  bagCount = 0,
  cards = {}, -- table of cardObjects
  onFinish = function() end -- function after on booster was created
};

function boosterCreator.createByTask(task, onFinish)
  boosterCreator.onFinish = onFinish;
  boosterCreator.addBoosterToQueue(task);
  if task.asBooster then
    boosterCreator.createBag(task);
  else
    boosterCreator.createCardsFromQueue(task);
  end

end

function boosterCreator.createBag(task)
  local targetPosition = getObjectFromGUID(boardId).getPosition();
  local column = (boosterCreator.bagCount % 5) * 3;
  local row = math.floor(boosterCreator.bagCount / 5) * 3;
  targetPosition.y = targetPosition.y + 10;
  targetPosition.x = targetPosition.x - 6 + (column);
  targetPosition.z = targetPosition.z + 6 - row;

  local spawnParams = {
    type = "Custom_Model",
    position = targetPosition,
    rotation={x=0, y=180, z=0}
  }
  local bag = spawnObject(spawnParams)
  boosterCreator.bagCount = boosterCreator.bagCount + 1;
  bag.setName(setLoader.getSet(task.setId).setName);
  bag.use_gravity = false
  local bagName = task.setId;
  if bagName == "con" then
    bagName = "con_"
  end
  local options = {
    mesh = "https://raw.githubusercontent.com/buflix/mtg-booster-gen/master/bag/mesh",
    diffuse = "https://github.com/buflix/mtg-booster-gen/blob/master/bag/prints/" .. bagName .. ".png?raw=true",
    normal = "https://github.com/buflix/mtg-booster-gen/blob/master/bag/normal.png?raw=true",
    type = '6',
  }
  bag.setCustomObject(options)
  -- only allow cards and decks in the bag to denie bag in bag
  bag.script_code = 'function filterObjectEnter(obj) if obj.tag == "CARD" or obj.tag == "Deck" then return true else return false end end'
  -- have to reload the bag toload the script and type
  local newBag = bag.reload()
  local waitForReload = function ()
    boosterCreator.bagGuid = newBag.guid
    boosterCreator.createCardsFromQueue(task)
  end
  Wait.frames(waitForReload, 15)
end

function boosterCreator.createCardsFromQueue(task)
  if boosterCreator.cardQueue:hasItem() then
    local card = boosterCreator.cardQueue:popNext();
    local onCardSpawn = function(object)
      boosterCreator.applyCardOptions(object, card.name, card.picture);
      boosterCreator.createCardsFromQueue(task);
    end
    boosterCreator.createCard(boosterCreator.determineCardSpawnPosition(task), onCardSpawn);
  else
    local handleDeck = nil;
    local deck = boosterCreator.groupCards();
    if task.asBooster then
      handleDeck = function() boosterCreator.putCardsIntoBag(deck) end
    else
      handleDeck = function() boosterCreator.onFinish() end
    end
    Wait.frames(handleDeck, 15) --wait one frame until deck is created
  end
end

function boosterCreator.groupCards()
  local decks = group(boosterCreator.cards);
  local cardStack = nil;
  for index,deck in ipairs(decks) do cardStack = deck end

  return cardStack;
end

function boosterCreator.determineCardSpawnPosition(task)
  local targetPosition = getObjectFromGUID(boardId).getPosition();
  local boosterMod =  (task.asBooster and -10 or 0)
  targetPosition.x = targetPosition.x - boosterMod;
  targetPosition.y = (boosterCreator.cardQueue:getCount() + 1) / 4 + 5 + targetPosition.y -- use different hights, to avoid rnd stacks

  return targetPosition
end

function boosterCreator.putCardsIntoBag(deck)
  local bag = getObjectFromGUID(boosterCreator.bagGuid);
  bag.putObject(deck)
  bag.use_gravity = true;
  boosterCreator.onFinish();
end

function boosterCreator.addBoosterToQueue(task)
  local set = setLoader.getSet(task.setId);
  local landmod = 0

  if #set.land > 0 then
    if task.keepBasicLands then
      boosterCreator.addCardsByRarity(set, 'land', 1);
    end
  else
    landmod = 1;
  end

  boosterCreator.addCardsByRarity(set, 'common', 10 + landmod)
  boosterCreator.addCardsByRarity(set, 'uncommon', 3)
  if boosterCreator.willDrawMythic(set) then
    boosterCreator.addCardsByRarity(set, 'mythic', 1)
  else
    boosterCreator.addCardsByRarity(set, 'rare', 1)
  end

end

function boosterCreator.addCardsByRarity(set, rarity, amount)
  local usedCardIds = {};
  for i = 1, amount do
    local card = set[rarity][math.random(1, #set[rarity])];
    -- and usedCardIds[card.collector_number] != true
    if card.image_uris and card.image_uris.normal and card.name and usedCardIds[card.collector_number] != true then
      local entity = {
        picture = card.image_uris.normal,
        name = card.name
      };
      usedCardIds[card.collector_number] = true
      boosterCreator.cardQueue:push(entity);
    else
      boosterCreator.addCardsByRarity(set, rarity, 1)
    end

  end
end

function boosterCreator.willDrawMythic(set)
  return #set.mythic > 0 and math.random(8) == 1
end

function boosterCreator.createCard(position, callback)
  spawnParams = {
    type = "CARD",
    position = position,
    rotation={x=180, y=0, z=0},
    callback_function = callback
  }
  return spawnObject(spawnParams)
end

function boosterCreator.applyCardOptions(object, name, picture)
  object.setName(name);
  local params = {
    face = picture,
    back = 'https://github.com/buflix/mtg-booster-gen/blob/master/card/back.jpg?raw=true',
  }
  object.setCustomObject(params)
  table.insert(boosterCreator.cards, object);
end

--[[
     setLoader
--]]
setLoader = {};
setLoader.processing = false;
setLoader.sets = {};
setLoader.onSetIsLoaded = function() end;

function setLoader.loadSet(setId, callback)
  setLoader.onSetIsLoaded = callback;
  if setLoader.hasSet(setId) then
    callback();
  else
    if setLoader.processing then
      printToAll("Can only fetch one set at the same time. Pls try again later", {r=1,g=0,b=0})
    else
      printToAll("Fetching set...");
      setLoader.processing = true;
      setLoader.requestSet(setId, 1)
    end
  end
end

function setLoader.requestSet(setId, page)
  local request = "https://api.scryfall.com/cards/search?page=" .. page .. "&q=include%3Aextras+e%3A" .. setId
  printToAll('Loading set ' .. setId .. ', page ' .. page)
  local waitUntilResponseExists = function(response)
    local pipeFunc = function() setLoader.onFetchSetResponse(response, page) end
    local checkResponse = function() return response.is_done end
    Wait.condition(pipeFunc, checkResponse)
  end

  WebRequest.get(request, function(response) waitUntilResponseExists(response) end)

end

function setLoader.onFetchSetResponse(response, page)
  local cards = luaJson.json2lua(response.text)
  local setId = cards.data[1].set
  local setName = cards.data[1].set_name;
  local existingSet = setLoader.sets[setId]
  local splittedSet = setLoader.splitByRarity(cards, existingSet)

  splittedSet.setName = setName;
  setLoader.sets[setId] = splittedSet;
  if cards.has_more then
    setLoader.requestSet(setId, page + 1)
  else
    setLoader.processing = false;
    printToAll('Loading complete', {r=0,g=1,b=0})
    setLoader.onSetIsLoaded();
  end
end

function setLoader.splitByRarity(cards, existingSet)
  local preparedSet
  if existingSet == nil then
    preparedSet = {
      common = {},
      uncommon = {},
      rare = {},
      mythic = {},
      land = {}
    }
  else
    preparedSet = existingSet
  end

  for i = 1, #cards.data do
    local currentCard = cards.data[i];
    local rarity
    if  currentCard.booster then
      if string.match(currentCard.type_line, 'Basic Land') then
        rarity = 'land'
      else
        rarity = currentCard.rarity;
      end
      local currentLength = #preparedSet[rarity];
      preparedSet[rarity][currentLength + 1] = currentCard;
    end
  end
  return preparedSet
end

function setLoader.hasSet(setId)
  return not (setLoader.sets[setId] == nil);
end

function setLoader.isProcessing()
  return setLoader.processing;
end

function setLoader.getSet(setId)
  return setLoader.sets[setId];
end

--[[
     Board
--]]
boardId = '49e878'
setNames = {}

function keepBasicLands()
  local keepBasicLandsId = 'f7e933'
  local object = getObjectFromGUID(keepBasicLandsId);
  return object.is_face_down
end

function spawnAsBooster()
  local guId = '1645a7'
  local object = getObjectFromGUID(guId);
  return not object.is_face_down
end

function getAmountOfBoosters()
  local guId = 'bf0ba7'
  local amount = getObjectFromGUID(guId).getValue();
  if amount > 20 then
    printToAll('Too many boosters. Pls respect the platform which provides the cards', {r=1,g=0,b=0})
    printToAll("")
    error("", 3)
    printToAll("")
  end
    return amount;
end


function loadSet(setId)
  if setLoader.hasSet(setId) then
    triggerBoosterCreation(setId);
  else
    setLoader.loadSet(setId, function() triggerBoosterCreation(setId) end);
  end
end

function triggerBoosterCreation(setId)
  for i = 1, getAmountOfBoosters() do
    local task = createTask(setId);
    boosterQueue:push(task);
  end
  worker.run();
end

function createTask(setId)
  return {
    setId = setId,
    keepBasicLands = false,
    asBooster = false
  }
end

--[[
Buttons
--]]

function onLoad()
  createButtons();
end

function createButtons()
  local table = getObjectFromGUID(boardId);
  local size = table.getBoundsNormalized().size;
  local pos = table.getPosition();
  pos.y = pos.y + 1

  local zoneSpawn = {position = pos
         , scale = size
         , type = 'ScriptingTrigger'
         , callback = 'applyButtons'
         , callback_owner = self
         , rotation = table.getRotation() }
  spawnObject(zoneSpawn)
end

function applyButtons(zone)
  for _,object in ipairs(zone.getObjects()) do
    if object.tag == 'Tile' then
        if object.getDescription() ~= 'rnd' then
          table.insert(setNames, object.getDescription())
        end
        createButton(object)
    end
  end
end

function createButton(tile)
  local callback;
  if tile.getDescription() == 'rnd' then
    callback = 'onClickRndButton';
  else
    callback = 'onClickSetButton';
  end
  local params = {
      click_function = callback,
      function_owner = self,
      position       = {0, 0, 0},
      width          = 1000,
      height         = 1000,
      font_size      = 340,
      tooltip        = tile.getName()
  }
  tile.createButton(params)
end

function onClickSetButton(obj)
  loadSet(obj.getDescription())
end

function onClickRndButton(obj)
  local rndSets = Collection:new();
  for i = 1, getAmountOfBoosters() do
    local rndIndex = math.random(1, #setNames);
    rndSets:push(setNames[rndIndex]);
  end
    triggerRndBoosterCreation(rndSets);
end

function triggerRndBoosterCreation(rndSetCollection)
  printToAll('Booster ' .. rndSetCollection:getCount());
    if rndSetCollection:hasItem() then
      local setId = rndSetCollection:popNext();
      boosterQueue:push(createTask(setId));
      setLoader.loadSet(setId, function() triggerRndBoosterCreation(rndSetCollection) end);
    else
      worker.run()
    end
end


-- https://github.com/BanMing/BanMingLuaLab/blob/master/LuaTest/Test/LuaJson.lua
luaJson = {}
local function json2true(str, from, to)
    return true, from + 3
end

local function json2false(str, from, to)
    return false, from + 4
end

local function json2null(str, from, to)
    return nil, from + 3
end

local function json2nan(str, from, to)
    return nul, from + 2
end

local numberchars = {
    ['-'] = true,
    ['+'] = true,
    ['.'] = true,
    ['0'] = true,
    ['1'] = true,
    ['2'] = true,
    ['3'] = true,
    ['4'] = true,
    ['5'] = true,
    ['6'] = true,
    ['7'] = true,
    ['8'] = true,
    ['9'] = true,
}

local function json2number(str, from, to)
    local i = from + 1
    while (i <= to) do
        local char = string.sub(str, i, i)
        if not numberchars[char] then
            break
        end
        i = i + 1
    end
    local num = tonumber(string.sub(str, from, i - 1))
    if not num then
        Log("red", 'json格式错误，不正确的数字, 错误位置:', from)
    end
    return num, i - 1
end

local function json2string(str, from, to)
    local ignor = false
    for i = from + 1, to do
        local char = string.sub(str, i, i)
        if not ignor then
            if char == '\"' then
                return string.sub(str, from + 1, i - 1), i
            elseif char == '\\' then
                ignor = true
            end
        else
            ignor = false
        end
    end
    Log("red", 'json格式错误，字符串没有找到结尾, 错误位置:{from}', from)
end

local function json2array(str, from, to)
    local result = {}
    from = from or 1
    local pos = from + 1
    local to = to or string.len(str)
    while (pos <= to) do
        local char = string.sub(str, pos, pos)
        if char == '\"' then
            result[#result + 1], pos = json2string(str, pos, to)
        --[[    elseif char == ' ' then

        elseif char == ':' then

        elseif char == ',' then]]
        elseif char == '[' then
            result[#result + 1], pos = json2array(str, pos, to)
        elseif char == '{' then
            result[#result + 1], pos = luaJson.json2table(str, pos, to)
        elseif char == ']' then
            return result, pos
        elseif (char == 'f' or char == 'F') then
            result[#result + 1], pos = json2false(str, pos, to)
        elseif (char == 't' or char == 'T') then
            result[#result + 1], pos = json2true(str, pos, to)
        elseif (char == 'n') then
            result[#result + 1], pos = json2null(str, pos, to)
        elseif (char == 'N') then
            result[#result + 1], pos = json2nan(str, pos, to)
        elseif numberchars[char] then
            result[#result + 1], pos = json2number(str, pos, to)
        end
        pos = pos + 1
    end
    Log("red", 'json格式错误，表没有找到结尾, 错误位置:{from}', from)
end

local function string2json(key, value)
    return string.format("\"%s\":\"%s\",", key, value)
end

local function number2json(key, value)
    return string.format("\"%s\":%s,", key, value)
end

local function boolean2json(key, value)
    value = value == nil and false or value
    return string.format("\"%s\":%s,", key, tostring(value))
end

local function array2json(key, value)
    local str = "["
    for k, v in pairs(value) do
        str = str .. luaJson.table2json(v) .. ","
    end
    str = string.sub(str, 1, string.len(str) - 1) .. "]"
    return string.format("\"%s\":%s,", key, str)
end

local function isArrayTable(t)

    if type(t) ~= "table" then
        return false
    end

    local n = #t
    for i, v in pairs(t) do
        if type(i) ~= "number" then
            return false
        end

        if i > n then
            return false
        end
    end

    return true
end

local function table2json(key, value)
    if isArrayTable(value) then
        return array2json(key, value)
    end
    local tableStr = luaJson.table2json(value)
    return string.format("\"%s\":%s,", key, tableStr)
end



function luaJson.json2table(str, from, to)
    local result = {}
    from = from or 1
    local pos = from + 1
    local to = to or string.len(str)
    local key
    while (pos <= to) do
        local char = string.sub(str, pos, pos)
        --Log("yellow", pos, "-->", char)
        if char == '\"' then
            if not key then
                key, pos = json2string(str, pos, to)
            else
                result[key], pos = json2string(str, pos, to)
                key = nil
            end
        --[[    elseif char == ' ' then

        elseif char == ':' then

        elseif char == ',' then]]
        elseif char == '[' then
            if not key then
                key, pos = json2array(str, pos, to)
            else
                result[key], pos = json2array(str, pos, to)
                key = nil
            end
        elseif char == '{' then
            if not key then
                key, pos = luaJson.json2table(str, pos, to)
            else
                result[key], pos = luaJson.json2table(str, pos, to)
                key = nil
            end
        elseif char == '}' then
            return result, pos
        elseif (char == 'f' or char == 'F') then
            result[key], pos = json2false(str, pos, to)
            key = nil
        elseif (char == 't' or char == 'T') then
            result[key], pos = json2true(str, pos, to)
            key = nil
        elseif (char == 'n') then
            result[key], pos = json2null(str, pos, to)
            key = nil
        elseif (char == 'N') then
            result[key], pos = json2nan(str, pos, to)
            key = nil
        elseif numberchars[char] then
            if not key then
                key, pos = json2number(str, pos, to)
            else
                result[key], pos = json2number(str, pos, to)
                key = nil
            end
        end
        pos = pos + 1
    end
    Log("red", 'json格式错误，表没有找到结尾, 错误位置:{from}', from)
end

--json格式中表示字符串不能使用单引号
local jsonfuncs = {
    ['\"'] = json2string,
    ['['] = json2array,
    ['{'] = luaJson.json2table,
    ['f'] = json2false,
    ['F'] = json2false,
    ['t'] = json2true,
    ['T'] = json2true,
}

function luaJson.json2lua(str)
    local char = string.sub(str, 1, 1)
    local func = jsonfuncs[char]
    if func then
        return func(str, 1, string.len(str))
    end
    if numberchars[char] then
        return json2number(str, 1, string.len(str))
    end
end

function luaJson.table2json(tab)
    local str = "{"
    for k, v in pairs(tab) do
        if type(v) == "string" then
            str = str .. string2json(k, v)
        elseif type(v) == "number" then
            str = str .. number2json(k, v)
        elseif type(v) == "boolean" then
            str = str .. boolean2json(k, v)
        elseif type(v) == "table" then
            str = str .. table2json(k, v)
        end
    end
    str = string.sub(str, 1, string.len(str) - 1)
    return str .. "}"
end

-- end
